apply plugin: 'com.android.application'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
        versionCode 1020
        versionName "1.0.2"
    }
    signingConfigs {
        release {
            storeFile file("/Users/walker/Dropbox/NGDS_Android/Project/push_newgame/UserGuide/Release/ngds.keystore")
            storePassword "ngdsngds"
            keyAlias "ngds"
            keyPassword "ngdsngds"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(variant, defaultConfig)
            }
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['src']
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile project(":library:im_android_sdk")
}

def appendVersionNameVersionCode(variant, defaultConfig) {
    //check if staging variant
    if (variant.name == android.buildTypes.release.name) {
        if (variant.buildType.zipAlignEnabled) {
            variant.outputs.each{output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')){
                    def fileName = outputFile.name.replace(".apk", "-v" + defaultConfig.versionName + ".apk")
                    output.outputFile = new File(outputFile.parent, fileName)
                }

            }
        }
       /* def file = variant.buildType.packageApplication.outputFile
        def fileName = file.name.replace(".apk", "-v" + defaultConfig.versionName + ".apk")
        variant.packageApplication.outputFile = new File(file.parent, fileName)*/
    }
}
